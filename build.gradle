/* Add the war and gretty plugins */
plugins {
    id 'war'
    id 'org.gretty' version '2.2.0'
}

project.webAppDirName = 'WebContent'

/* Exclude the Mocha files from the war package. */
war {
    exclude 'node_modules'
    exclude 'package-lock.json'
    exclude 'test'
}

/* Use Jetty version 9.4,
   There is a bug using Jetty 9.0, default version
   Start and stop Jetty server around "test" task
*/
gretty {
    servletContainer = 'jetty9.4'
    integrationTestTask = 'test'
}

ext {
    springVersion = "5.2.7.RELEASE"
    springSecurityVersion = "5.2.7.RELEASE"
    jerseyVersion = "2.28"
    jstlVersion = "1.2.1"
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
           compile "org.springframework:spring-core:$springVersion",
                   "org.springframework:spring-context:$springVersion",
                   "org.springframework.data:spring-data-jpa:2.1.6.RELEASE",
                    "org.springframework:spring-webmvc:$springVersion",

                    "org.springframework.security:spring-security-core:$springSecurityVersion",
                    "org.springframework.security:spring-security-config:$springSecurityVersion",
                    "org.springframework.security:spring-security-web:$springSecurityVersion",
                    "org.springframework.security:spring-security-taglibs:$springSecurityVersion",
                    "org.springframework:spring-test:$springVersion",

                   "org.hibernate:hibernate-entitymanager:5.4.2.Final",
                   "javax.servlet:javax.servlet-api:3.1.0",
                   "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion",
                   "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
                   "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion",
                   "jakarta.servlet:jakarta.servlet-api:4.0.2",
                   "com.googlecode.json-simple:json-simple:1.1.1",
                   "org.postgresql:postgresql:42.2.5",
                   "com.fasterxml.jackson.core:jackson-annotations:2.9.8",
                   "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1",
                   "javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:$jstlVersion",
                   "taglibs:standard:1.1.2"
           testImplementation "junit:junit:4.12",
                    "org.mockito:mockito-core:3.10.0",
                    "org.springframework.security:spring-security-test:$springSecurityVersion",
                    "org.hamcrest:hamcrest-library:2.2"
           implementation "org.hibernate.validator:hibernate-validator:6.0.13.Final",
                    "javax.servlet.jsp.jstl:jstl:1.2"
}

task testSetupDB(type: Exec) {
   def dbPassword = project.properties['dbPassword']
   def dbUsername = project.properties['dbUsername']
   def dbHostname = project.properties['dbHostname']
   def dbPort = project.properties['dbPort']
   def postgresQLbinDir = project.properties['postgresQLbinDir']
   def sqlFileScript = "$project.projectDir/database/InitVolleyballTest.sql"
   String psqlCommandLine = "psql -h $dbHostname -U $dbUsername -p $dbPort -f $sqlFileScript"
   
   environment 'PGPASSWORD', dbPassword
   workingDir postgresQLbinDir
   commandLine 'cmd', '/c', psqlCommandLine
}

/**
 * This project requires two property files, although they are both identical.
 * gradle.properties which is the default property file for the gradle, stored in the
 *      gradle project directory.
 * application.properties which is the default property file for Spring Data, stored
 *      in the src/main/resources directory and copied to the war file.
 * Therefore instead of maintaining two property files, the user is always asked to
 * update gradle.properties, and this file is always copied to
 * src/main/resources/application.properties when a build takes place.
 *
 * Note this task is always performed before a processResources task, therefore it is
 * always performed before a war, test or appRun task.
 */
task copyPropertiesFile(type: Copy) {
    from file("$project.projectDir/gradle.properties")
    into file("$project.projectDir/src/main/resources")
    rename('gradle.properties', 'application.properties')
}

/**
 * Runs the Java unit test on a Windows system.
 * Automatically loads the database with the
 * VolleyBallLeagueSystem\database\InitVolleyballTest.sql script.
 * Uses the testSetupDB task, which uses the Windows 'cmd' command.
 */
task testOnWindows {
}

/**
 * Runs the Java unit test on a non Windows system.
 * The database has to be first manually loaded with the sql script
 * VolleyBallLeagueSystem\database\InitVolleyballTest.sql
 */
task testNotOnWindows {
}

testOnWindows.dependsOn testSetupDB
testOnWindows.dependsOn test
test.mustRunAfter testSetupDB

testNotOnWindows.dependsOn test

processResources.dependsOn copyPropertiesFile
